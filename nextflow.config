docker.enabled = true

params {
    inputdir = false
    outdir   = "results"
    ref      = false
    skip_multiqc = false
    skipPicard = true
    max_memory = 8.GB
    max_cpus = 2
    max_time = 4.h
}

process {
  withLabel:memory_max {
    memory = {params.max_memory}
  }
  withLabel:cpus_1 {
    cpus = 1
  }
  withName: validate_bam {
    container = "broadinstitute/gatk:4.1.3.0"
  }
  withName: samtools_flagstat {
    container = "nfcore/sarek:2.5.1"
  }
  withName: qualimap_bamqc {
    container = "nfcore/sarek:2.5.1"
  }  
  withName: inliner {
    container = "loadthefalaina/inliner:2.13.1"
  }
  withName: multiqc {
    container = "nfcore/sarek:2.5.1"
  }
}

// Return the minimum between requirements and a maximum limit to ensure that resource requirements don't go over; Source: nf-core/sarek
def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}